// Basic DAL functions, generated by AI for context

const CodeSnippet = require ("../model/codeModel")

// Function 1: Create a new snippet in the DB
async function createSnippet(title, code, language, createdBy) {
    try {
        const snippet = new CodeSnippet({
            title,
            code,
            language,
            createdBy
        });
        await snippet.save();
        return snippet;
    } catch (error) {
        throw new Error('Failed to create snippet');
    }
}

// Function 2: Get a snippet by key and mark it as completed if 24 hours have passed
async function getSnippetByKey(key) {
    try {
        const snippet = await CodeSnippet.findOne({ key });
        if (snippet) {
            const twentyFourHours = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
            const elapsedTime = Date.now() - snippet.createdAt.getTime();
            if (elapsedTime >= twentyFourHours) {
                snippet.markAsComplete();
                await snippet.save();
            }
        }
        return snippet;
    } catch (error) {
        throw new Error('Failed to get snippet by key');
    }
}

// Function 3: Update snippet as code creator
async function updateSnippetAsCreator(snippetId, updatedCode) {
    try {
        const snippet = await CodeSnippet.findById(snippetId);
        if (snippet) {
            if (snippet.canEdit(currentUser)) {
                snippet.code = updatedCode;
                await snippet.save();
                return snippet;
            } else {
                throw new Error('You are not authorized to update this snippet');
            }
        } else {
            throw new Error('Snippet not found');
        }
    } catch (error) {
        throw new Error('Failed to update snippet as code creator');
    }
}

// Function 4: Push suggestion to change the code as non-creator user
async function pushSuggestion(snippetId, userId, suggestion) {
    try {
        const snippet = await CodeSnippet.findById(snippetId);
        if (snippet) {
            snippet.suggestedUpdates.push({
                user: userId,
                update: suggestion
            });
            await snippet.save();
            return snippet;
        } else {
            throw new Error('Snippet not found');
        }
    } catch (error) {
        throw new Error('Failed to push suggestion');
    }
}

// Function 5: Mark snippet as completed
async function markSnippetAsCompleted(snippetId) {
    try {
        const snippet = await CodeSnippet.findById(snippetId);
        if (snippet) {
            snippet.markAsComplete();
            await snippet.save();
            return snippet;
        } else {
            throw new Error('Snippet not found');
        }
    } catch (error) {
        throw new Error('Failed to mark snippet as completed');
    }
}

module.exports = {
    createSnippet,
    getSnippetByKey,
    updateSnippetAsCreator,
    pushSuggestion,
    markSnippetAsCompleted
};
