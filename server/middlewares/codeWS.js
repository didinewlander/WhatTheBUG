// Basic Service functions, generated by AI for context


const CodeSnippet = require("../model/codeModel");
// Service 1: Handle snippet creation, getting all the data from the user, including the user id
async function handleSnippetCreation(title, code, language, createdBy) {
    try {
        const snippet = await createSnippet(title, code, language, createdBy);
        return snippet;
    } catch (error) {
        throw new Error('Failed to handle snippet creation');
    }
}

// Service 2: Handle saving snippet updates
async function handleSaveSnippetUpdates(snippetId, updatedCode) {
    try {
        const snippet = await updateSnippetAsCreator(snippetId, updatedCode);
        return snippet;
    } catch (error) {
        throw new Error('Failed to handle saving snippet updates');
    }
}

// Service 3: Handle suggestions
async function handleSuggestions(snippetId, userId, suggestion) {
    try {
        const snippet = await pushSuggestion(snippetId, userId, suggestion);
        return snippet;
    } catch (error) {
        throw new Error('Failed to handle suggestions');
    }
}

// Service 4: Handle marking a snippet as completed
async function handleMarkSnippetAsCompleted(snippetId) {
    try {
        const snippet = await markSnippetAsCompleted(snippetId);
        return snippet;
    } catch (error) {
        throw new Error('Failed to handle marking snippet as completed');
    }
}

// Service 5: Handle approving a change (only one at a time)
async function handleApproveChange(snippetId, changeId) {
    try {
        const snippet = await CodeSnippet.findById(snippetId);
        if (snippet) {
            const change = snippet.suggestedUpdates.id(changeId);
            if (change) {
                snippet.title = change.title || snippet.title;
                snippet.code = change.code || snippet.code;
                snippet.language = change.language || snippet.language;
                snippet.suggestedUpdates.pull(changeId);
                await snippet.save();
                return snippet;
            } else {
                throw new Error('Change not found');
            }
        } else {
            throw new Error('Snippet not found');
        }
    } catch (error) {
        throw new Error('Failed to handle approving change');
    }
}

// Service 6: Handle declining a change (only one at a time)
async function handleDeclineChange(snippetId, changeId) {
    try {
        const snippet = await CodeSnippet.findById(snippetId);
        if (snippet) {
            const change = snippet.suggestedUpdates.id(changeId);
            if (change) {
                snippet.suggestedUpdates.pull(changeId);
                await snippet.save();
                return snippet;
            } else {
                throw new Error('Change not found');
            }
        } else {
            throw new Error('Snippet not found');
        }
    } catch (error) {
        throw new Error('Failed to handle declining change');
    }
}

module.exports = {
    handleSnippetCreation,
    handleSaveSnippetUpdates,
    handleSuggestions,
    handleMarkSnippetAsCompleted,
    handleApproveChange,
    handleDeclineChange
};
